{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/Theo/REACT JS/react_testing/src/components/ApiApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport MoviesList from \"./MovieList\";\nimport \"./ApiApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ApiApp() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [final, setFinal] = useState(null);\n  const [movies, setMovies] = useState([]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went unplanned!!!\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (errors) {\n      setError(errors.message);\n    } finally {\n      setFinal(\"Finally we are here\");\n      setIsLoading(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 45\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...*.*.*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 23\n      }, this), !isLoading && movies.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Found no Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 47\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: final\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ApiApp, \"RYL8Rxhe/+N/t+2iGTM5U0QA42M=\");\n\n_c = ApiApp;\nexport default ApiApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiApp\");","map":{"version":3,"sources":["/home/dell/Desktop/Theo/REACT JS/react_testing/src/components/ApiApp.js"],"names":["React","useState","MoviesList","ApiApp","isLoading","setIsLoading","error","setError","final","setFinal","movies","setMovies","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","errors","message","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,cAAP;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;;AAEA,iBAAeW,kBAAf,GAAoC;AAClCP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AACxD,eAAO;AACLC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,SAAP;AAMD,OAPyB,CAA1B;AAQAlB,MAAAA,SAAS,CAACQ,iBAAD,CAAT;AACAd,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAnBD,CAmBE,OAAOyB,MAAP,EAAe;AACfvB,MAAAA,QAAQ,CAACuB,MAAM,CAACC,OAAR,CAAR;AACD,KArBD,SAqBU;AACRtB,MAAAA,QAAQ,CAAC,qBAAD,CAAR;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAED;AAEF;;AAED,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEO,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACG,CAACR,SAAD,IAAcM,MAAM,CAACsB,MAAP,GAAgB,CAA9B,iBAAmC,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEtB;AAApB;AAAA;AAAA;AAAA;AAAA,cADtC,EAEGN,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhB,EAGG,CAACA,SAAD,IAAcM,MAAM,CAACsB,MAAP,KAAkB,CAAhC,iBAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHxC,EAIG,CAAC5B,SAAD,IAAcE,KAAd,iBAAuB;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAJ1B,eAKI;AAAA,kBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAtDQL,M;;KAAAA,M;AAwDT,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./MovieList\";\nimport \"./ApiApp.css\";\n\nfunction ApiApp() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [final, setFinal] = useState(null);\n  const [movies, setMovies] = useState([]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went unplanned!!!\");\n      }\n\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (errors) {\n      setError(errors.message);\n    } finally {\n      setFinal(\"Finally we are here\");\n      setIsLoading(false);\n\n    }\n    \n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {isLoading && <p>Loading...*.*.*</p>}\n        {!isLoading && movies.length === 0 && <p>Found no Movies</p>}\n        {!isLoading && error && <p>{error}</p>}\n        { <p>{final}</p>}\n\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default ApiApp;\n"]},"metadata":{},"sourceType":"module"}