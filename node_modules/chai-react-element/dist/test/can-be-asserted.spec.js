'use strict';

require('source-map-support/register');

var _chai = require('chai');

var _canBeAsserted = require('../src/can-be-asserted');

var _canBeAsserted2 = _interopRequireDefault(_canBeAsserted);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('The assertion predicate', function () {
    it('accepts a single ReactElement', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)(_react2.default.createElement('div', null))).to.be.true;
    });

    it('accepts a single ReactElement with a prop', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)(_react2.default.createElement('div', { 'data-foo': 'bar' }))).to.be.true;
    });

    it('accepts a nested ReactElement hierarchy', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)(_react2.default.createElement(
            'div',
            null,
            _react2.default.createElement('span', null)
        ))).to.be.true;
    });

    it('accepts a ReactElement from a local component class', function () {
        var NonNativeComp = _react2.default.createClass({
            displayName: 'NonNativeComp',

            render: function render() {
                return _react2.default.createElement('div', null);
            }
        });

        var comp = _react2.default.createElement(NonNativeComp, null);

        (0, _chai.expect)((0, _canBeAsserted2.default)(comp)).to.be.true;
    });

    it('accepts an object with a type field', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)({ type: 'div' })).to.be.true;
    });

    it('accepts an object with props', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)({ type: 'div', props: {} })).to.be.true;
    });

    it('accepts a duck that looks like a rendered DOM element', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)({ _reactInternalComponent: { _currentElement: true } })).to.be.true;
    });

    it('rejects undefined', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)()).to.be.false;
    });

    it('rejects null', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)(null)).to.be.false;
    });

    it('rejects a string', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)('foo')).to.be.false;
    });

    it('rejects an object without type', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)({})).to.be.false;
    });

    it('rejects an object with a type property that is not a string', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)({ type: 1 })).to.be.false;
    });

    it('accepts an object with a props property that is not an object', function () {
        (0, _chai.expect)((0, _canBeAsserted2.default)({ type: 'div', props: 1 })).to.be.false;
    });
});
//# sourceMappingURL=can-be-asserted.spec.js.map
