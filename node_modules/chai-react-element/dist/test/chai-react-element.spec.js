'use strict';

require('source-map-support/register');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiReactElement = require('../src/chai-react-element');

var _chaiReactElement2 = _interopRequireDefault(_chaiReactElement);

var _canBeAsserted = require('../src/can-be-asserted');

var _canBeAsserted2 = _interopRequireDefault(_canBeAsserted);

var _reactClientRenderer = require('./react-client-renderer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_chaiReactElement2.default);

// this asserts that we have no false positives, see https://github.com/chaijs/chai/issues/467
// can be removed when upgrading to Chai 4.x.x
_chai2.default.use(function (chai) {
	chai.Assertion.overwriteMethod('prop', explode);
	chai.Assertion.overwriteMethod('text', explode);
	chai.Assertion.overwriteMethod('elementOfType', explode);

	function explode(_super) {
		return function () {
			if (typeof this._obj === 'string' || (0, _canBeAsserted2.default)(this._obj)) {
				return _super.apply(this, arguments);
			} else {
				throw new Error('No plugin found for asserting expectable ' + this._obj);
			}
		};
	}
});

describe('ReactElement matcher', function () {

	if ((0, _reactClientRenderer.isInBrowser)()) {
		var renderer = new _reactClientRenderer.ReactClientRenderer();
		before(renderer.mount.bind(renderer));
		beforeEach(renderer.cleanup.bind(renderer));
		after(renderer.destroy.bind(renderer));

		describe('for rendered DOM', assertContract(renderer.render.bind(renderer)));
	}

	describe('for React VDOM', assertContract(function (vdom) {
		return vdom;
	}));

	function assertContract(render) {
		return function () {

			it('should filter nulls', function () {
				(0, _chai.expect)(render(_react2.default.createElement(
					'div',
					null,
					null,
					' ',
					_react2.default.createElement(
						'span',
						null,
						'yo'
					)
				))).to.include.elementOfType('span');
			});

			describe('.text', function () {
				it('asserts innerText', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							'hello'
						))).to.have.text('hello');
					}).not.to.throw();

					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							'hello'
						))).to.have.text('world');
					}).to.throw(/AssertionError: expected <.*> to have text 'world'/);
				});

				it('supports negation', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							'hello'
						))).to.not.have.text('hello');
					}).to.throw();

					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							'hello'
						))).to.not.have.text('world');
					}).not.to.throw();
				});

				it('detects text in children array', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)({ type: 'div', props: { children: ['bar'] } }).to.have.text('bar');
					}).not.to.throw();
				});

				it('filters nulls', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							null,
							' ',
							_react2.default.createElement(
								'span',
								null,
								'yo'
							)
						))).to.include.text('yo');
					}).not.to.throw();
				});
			});

			describe('.prop', function () {
				it('asserts top-level element with prop', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', { 'data-foo': 'bar' }))).to.have.prop('data-foo', 'bar');
					}).not.to.throw();
				});

				it('asserts boolean prop', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', { disabled: true }))).to.have.prop('disabled');
					}).not.to.throw();
				});

				it('asserts boolean prop with false value', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', { disabled: false }))).to.have.prop('disabled', false);
					}).not.to.throw();
				});

				it('asserts nested element with prop', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('div', { 'data-foo': 'bar' })
						))).to.include.prop('data-foo', 'bar');
					}).not.to.throw();
				});

				it('asserts nested element with prop in non compacted array', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							[null, [_react2.default.createElement('div', {
								'data-foo': 'bar' })]]
						))).to.include.prop('data-foo', 'bar');
					}).not.to.throw();
				});

				it('gives a detailed message when prop was not found', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', null))).to.have.prop('a', 'b');
					}).to.throw(/AssertionError: expected <.*> to contain a prop with name 'a' and value b/);
				});

				it('is chainable', function () {
					(0, _chai.expect)((0, _chai.expect)(render(_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'div',
							{ 'data-foo': 'bar' },
							'hello'
						)
					))).to.include.prop('data-foo', 'bar')).to.be.an.instanceOf(_chai2.default.Assertion).and.to.have.property('_obj').that.has.text('hello');
				});

				it('handles undefined props gracefully', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', { 'data-foo': undefined }))).to.include.prop('data-foo', undefined);
					}).not.to.throw();
				});
			});

			describe('.elementWithType', function () {
				it('asserts top-level element', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', null))).to.have.elementOfType('div');
					}).not.to.throw();
				});

				it('asserts nested element with tag', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('span', null)
						))).to.include.elementOfType('span');
					}).not.to.throw();
				});

				it('gives a detailed message when element was not found', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', null))).to.have.elementOfType('span');
					}).to.throw(/AssertionError: expected <.*> to have an element of type 'span'/);
				});

				it('is chainable', function () {
					(0, _chai.expect)((0, _chai.expect)(render(_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'span',
							null,
							'hello'
						)
					))).to.include.elementOfType('span')).to.be.an.instanceOf(_chai2.default.Assertion).and.to.have.property('_obj').that.has.text('hello');
				});

				it('handles negation properly', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement('div', null))).not.to.have.elementOfType('div');
					}).to.throw(/AssertionError: expected <.*> not to have an element of type 'div'/);

					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('span', null)
						))).not.to.include.elementOfType('span');
					}).to.throw(/AssertionError: expected <.*> not to have an element of type 'span'/);
				});

				it('filters nulls', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							null,
							' ',
							_react2.default.createElement(
								'span',
								null,
								'yo'
							)
						))).to.include.an.elementOfType('span');
					}).not.to.throw();
				});
			});

			describe('nesting behavior', function () {
				it('retains all matching elements for a chained assertion so as to satisfy nested assertions', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('span', null),
							_react2.default.createElement('span', { 'data-foo': 'bar' })
						))).to.include.elementOfType('span').with.prop('data-foo', 'bar');
					}).not.to.throw();
				});

				it('fails when a nested assertion fails', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('span', null),
							_react2.default.createElement('span', null)
						))).to.include.elementOfType('span').with.prop('data-foo');
					}).to.throw(/AssertionError: expected <.*> to contain a prop with name 'data-foo'/);
				});

				// need to think about nested negation
				xit('handles negation properly', function () {
					(0, _chai.expect)(function () {
						(0, _chai.expect)(render(_react2.default.createElement(
							'div',
							null,
							_react2.default.createElement('span', null),
							_react2.default.createElement('span', { 'data-foo': 'bar' })
						))).to.not.include.elementOfType('span').with.prop('data-foo');
					}).not.to.throw();
				});
			});
		};
	}
});
//# sourceMappingURL=chai-react-element.spec.js.map
