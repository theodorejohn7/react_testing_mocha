"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ReactClientRenderer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /// <reference path="../../typings/tsd.d.ts"/>


exports.isInBrowser = isInBrowser;

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function isInBrowser() {
	return typeof window !== 'undefined';
}

var ReactClientRenderer = exports.ReactClientRenderer = function () {
	function ReactClientRenderer() {
		_classCallCheck(this, ReactClientRenderer);
	}

	_createClass(ReactClientRenderer, [{
		key: "mount",
		value: function mount() {
			this.stage = createStage();
			this.renderedInstances = [];
			document.body.appendChild(this.stage);
		}
	}, {
		key: "render",
		value: function render(vdom) {
			var dontConnectToDom = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
			var containerNode = arguments[2];

			if (!isInBrowser()) {
				throw new Error("trying to render component instance not in browser - use render.server()");
			}

			if (!this.stage) {
				throw new Error("trying to render in an unmounted renderer - did you forget to call .mount()?");
			}

			var domNode = containerNode || document.createElement("div");
			if (!dontConnectToDom) {
				this.stage.appendChild(domNode);
			}
			var componentInstance = _reactDom2.default.render(vdom, domNode);
			if (this.renderedInstances.indexOf(componentInstance) === -1) {
				this.renderedInstances.push(componentInstance);
			}
			return componentInstance;
		}
	}, {
		key: "cleanup",
		value: function cleanup() {
			this.renderedInstances.forEach(destroyComponent);
			this.renderedInstances = [];
			if (this.stage) {
				this.stage.innerHTML = "";
			}
		}
	}, {
		key: "destroy",
		value: function destroy() {
			if (!this.stage) {
				throw new Error("trying to destroy an unmounted renderer - did you forget to call .mount()?");
			}

			document.body.removeChild(this.stage);
		}
	}]);

	return ReactClientRenderer;
}();

function destroyComponent(componentInstance) {
	_reactDom2.default.unmountComponentAtNode(_reactDom2.default.findDOMNode(componentInstance).parentElement);
}

var StageIdAttribute = 'data-automation-id';
var StageId = 'stage';

function createStage() {
	var stage = document.createElement("div");
	stage.setAttribute(ReactClientRenderer.StageIdAttribute, ReactClientRenderer.StageId);
	return stage;
}
//# sourceMappingURL=react-client-renderer.js.map
