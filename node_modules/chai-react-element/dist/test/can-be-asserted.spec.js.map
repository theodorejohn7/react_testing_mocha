{"version":3,"sources":["test/can-be-asserted.spec.js"],"names":["describe","it","to","be","true","NonNativeComp","createClass","render","comp","type","props","_reactInternalComponent","_currentElement","false"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,yBAAT,EAAoC,YAAW;AAC3CC,OAAG,+BAAH,EAAoC,YAAW;AAC3C,0BAAO,6BAAU,0CAAV,CAAP,EAA+BC,EAA/B,CAAkCC,EAAlC,CAAqCC,IAArC;AACH,KAFD;;AAIAH,OAAG,2CAAH,EAAgD,YAAW;AACvD,0BAAO,6BAAU,uCAAK,YAAS,KAAd,GAAV,CAAP,EAA8CC,EAA9C,CAAiDC,EAAjD,CAAoDC,IAApD;AACH,KAFD;;AAIAH,OAAG,yCAAH,EAA8C,YAAW;AACrD,0BAAO,6BAAU;AAAA;AAAA;AAAK;AAAL,SAAV,CAAP,EAA4CC,EAA5C,CAA+CC,EAA/C,CAAkDC,IAAlD;AACH,KAFD;;AAIAH,OAAG,qDAAH,EAA0D,YAAY;AAClE,YAAII,gBAAgB,gBAAMC,WAAN,CAAkB;AAAA;;AAClCC,oBAAQ,kBAAY;AAChB,uBAAQ,0CAAR;AACH;AAHiC,SAAlB,CAApB;;AAMA,YAAIC,OAAQ,8BAAC,aAAD,OAAZ;;AAEA,0BAAO,6BAAUA,IAAV,CAAP,EAAwBN,EAAxB,CAA2BC,EAA3B,CAA8BC,IAA9B;AACH,KAVD;;AAYAH,OAAG,qCAAH,EAA0C,YAAW;AACjD,0BAAO,6BAAU,EAACQ,MAAM,KAAP,EAAV,CAAP,EAAiCP,EAAjC,CAAoCC,EAApC,CAAuCC,IAAvC;AACH,KAFD;;AAIAH,OAAG,8BAAH,EAAmC,YAAW;AAC1C,0BAAO,6BAAU,EAACQ,MAAM,KAAP,EAAcC,OAAO,EAArB,EAAV,CAAP,EAA4CR,EAA5C,CAA+CC,EAA/C,CAAkDC,IAAlD;AACH,KAFD;;AAIAH,OAAG,uDAAH,EAA4D,YAAW;AACnE,0BAAO,6BAAU,EAACU,yBAAyB,EAACC,iBAAiB,IAAlB,EAA1B,EAAV,CAAP,EAAsEV,EAAtE,CAAyEC,EAAzE,CAA4EC,IAA5E;AAEH,KAHD;;AAKAH,OAAG,mBAAH,EAAwB,YAAW;AAC/B,0BAAO,8BAAP,EAAoBC,EAApB,CAAuBC,EAAvB,CAA0BU,KAA1B;AACH,KAFD;;AAIAZ,OAAG,cAAH,EAAmB,YAAW;AAC1B,0BAAO,6BAAU,IAAV,CAAP,EAAwBC,EAAxB,CAA2BC,EAA3B,CAA8BU,KAA9B;AACH,KAFD;;AAIAZ,OAAG,kBAAH,EAAuB,YAAW;AAC9B,0BAAO,6BAAU,KAAV,CAAP,EAAyBC,EAAzB,CAA4BC,EAA5B,CAA+BU,KAA/B;AACH,KAFD;;AAIAZ,OAAG,gCAAH,EAAqC,YAAW;AAC5C,0BAAO,6BAAU,EAAV,CAAP,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BU,KAA5B;AACH,KAFD;;AAIAZ,OAAG,6DAAH,EAAkE,YAAW;AACzE,0BAAO,6BAAU,EAACQ,MAAM,CAAP,EAAV,CAAP,EAA6BP,EAA7B,CAAgCC,EAAhC,CAAmCU,KAAnC;AACH,KAFD;;AAIAZ,OAAG,+DAAH,EAAoE,YAAW;AAC3E,0BAAO,6BAAU,EAACQ,MAAM,KAAP,EAAcC,OAAO,CAArB,EAAV,CAAP,EAA2CR,EAA3C,CAA8CC,EAA9C,CAAiDU,KAAjD;AACH,KAFD;AAIH,CA9DD","file":"test/can-be-asserted.spec.js","sourcesContent":["import 'source-map-support/register';\r\nimport {expect} from 'chai';\r\nimport predicate from '../src/can-be-asserted';\r\nimport React from 'react';\r\n\r\ndescribe('The assertion predicate', function() {\r\n    it('accepts a single ReactElement', function() {\r\n        expect(predicate(<div></div>)).to.be.true;\r\n    });\r\n\r\n    it('accepts a single ReactElement with a prop', function() {\r\n        expect(predicate(<div data-foo=\"bar\"></div>)).to.be.true;\r\n    });\r\n\r\n    it('accepts a nested ReactElement hierarchy', function() {\r\n        expect(predicate(<div><span></span></div>)).to.be.true;\r\n    });\r\n\r\n    it('accepts a ReactElement from a local component class', function () {\r\n        let NonNativeComp = React.createClass({\r\n            render: function () {\r\n                return (<div></div>);\r\n            }\r\n        });\r\n\r\n        let comp = (<NonNativeComp />);\r\n\r\n        expect(predicate(comp)).to.be.true;\r\n    });\r\n\r\n    it('accepts an object with a type field', function() {\r\n        expect(predicate({type: 'div'})).to.be.true;\r\n    });\r\n\r\n    it('accepts an object with props', function() {\r\n        expect(predicate({type: 'div', props: {}})).to.be.true;\r\n    });\r\n\r\n    it('accepts a duck that looks like a rendered DOM element', function() {\r\n        expect(predicate({_reactInternalComponent: {_currentElement: true}})).to.be.true;\r\n\r\n    });\r\n\r\n    it('rejects undefined', function() {\r\n        expect(predicate()).to.be.false;\r\n    });\r\n\r\n    it('rejects null', function() {\r\n        expect(predicate(null)).to.be.false;\r\n    });\r\n\r\n    it('rejects a string', function() {\r\n        expect(predicate('foo')).to.be.false;\r\n    });\r\n\r\n    it('rejects an object without type', function() {\r\n        expect(predicate({})).to.be.false;\r\n    });\r\n\r\n    it('rejects an object with a type property that is not a string', function() {\r\n        expect(predicate({type: 1})).to.be.false;\r\n    });\r\n\r\n    it('accepts an object with a props property that is not an object', function() {\r\n        expect(predicate({type: 'div', props: 1})).to.be.false;\r\n    });\r\n\r\n});"],"sourceRoot":"/source/"}